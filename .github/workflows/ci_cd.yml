name: "CI/CD"

on:
  pull_request:
    paths-ignore:
      - "**/*.md"

  push:
    branches:
      - develop

    paths-ignore:
      - "**/*.md"

env:
  GO_VERSION: "^1.19"

jobs:
  setup:
    name: setup
    runs-on: ubuntu-latest

    outputs:
      image_tag: ${{ env.version }}
      target_project: ${{ env.target_project }}

      topics: ${{ steps.changes.outputs.topics }}

      # Clients
      web: ${{ steps.changes.outputs.web }}

      # Functions
      functions_game_importer: ${{ steps.changes.outputs.functions_game_importer }}
      functions_schedule_manager: ${{ steps.changes.outputs.functions_schedule_manager }}
      functions_scoreboard_updater: ${{ steps.changes.outputs.functions_scoreboard_updater }}

      # Services
      services_api: ${{ steps.changes.outputs.services_api }}

      services_system: ${{ steps.changes.outputs.services_system }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Calculate path changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            topics:
              - "topics/**"
            web:
              - "web/**"
            services_api:
              - "services/api/**"
              - "yards_py/**"
            services_system:
              - "services/system/**"
              - "yards_py/**"
            functions_game_importer:
              - "functions/game_importer/**"
            functions_schedule_manager:
              - "functions/schedule_manager/**"
            functions_scoreboard_updater:
              - "functions/scoreboard_updater/**"

      - name: Configure version
        run: ./version.sh ${{ github.run_number }} ${{ github.ref_name }}

      - name: Configure environment test
        if: ${{ github.ref_name != 'main' }}
        run: echo "target_project=tired-lemur" >> $GITHUB_ENV

      - name: Configure environment live
        if: ${{ github.ref_name == 'main' }}
        run: echo "target_project=angry-panda >> $GITHUB_ENV

  topics:
    name: "topics"
    runs-on: ubuntu-latest
    needs: ["setup"]
    if: ${{ needs.setup.outputs.topics == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Setup gcloud
        env:
          CLOUDSDK_PYTHON: /usr/bin/python3
        with:
          project_id: ${{ needs.setup.outputs.target_project }}
          service_account_key: ${{ secrets.TOPIC_MANAGER_CREDENTIALS }} # TODO: topic creator credentials
          export_default_credentials: true
        uses: google-github-actions/setup-gcloud@v0

      - name: Setup python
        uses: actions/setup-python@v2

      - name: Install dependencies
        working-directory: topics
        run: pip install -r requirements.txt

      - name: Create topics
        if: github.event.pull_request.draft == false
        working-directory: topics
        env:
          GCLOUD_PROJECT: ${{ needs.setup.outputs.target_project }}
        run: python create.py

  # Clients
  web:
    name: "web"
    runs-on: ubuntu-latest
    needs: ["setup"]
    if: ${{ needs.setup.outputs.web == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Build and test
        uses: ./web/.workflows/ci

  # Functions
  functions_game_importer:
    name: "functions / game_importer"
    runs-on: ubuntu-latest
    needs: ["setup"]
    if: ${{ needs.setup.outputs.functions_game_importer == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Setup environment
        run: |
          echo "CFL_API_KEY=${{ secrets.CFL_API_KEY }}" >> $GITHUB_ENV
          echo "IS_DEV=true" >> $GITHUB_ENV
          echo "GCLOUD_PROJECT=github_ci_run" >> $GITHUB_ENV

      - name: Build and test
        uses: ./.github/actions/go_ci
        with:
          GO_VERSION: ${{ env.GO_VERSION }}
          WORKING_DIRECTORY: "functions/game_importer"

      - name: Deploy function
        if: github.event.pull_request.draft == false
        uses: ./.github/actions/deploy_function
        with:
          REGISTRY_PROJECT: ${{ secrets.REGISTRY }}
          GCP_CREDENTIALS: ${{ secrets.TEST_GCLOUD_CREDENTIALS }}
          TARGET_PROJECT: ${{ needs.setup.outputs.target_project }}
          WORKING_DIRECTORY: "functions/game_importer"

  functions_schedule_manager:
    name: "functions / schedule_manager"
    runs-on: ubuntu-latest
    needs: ["setup"]
    if: ${{ needs.setup.outputs.functions_schedule_manager == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Setup environment
        run: |
          echo "CFL_API_KEY=${{ secrets.CFL_API_KEY }}" >> $GITHUB_ENV
          echo "IS_DEV=true" >> $GITHUB_ENV
          echo "GCLOUD_PROJECT=github_ci_run" >> $GITHUB_ENV

      - name: Build and test
        uses: ./.github/actions/python_ci
        with:
          WORKING_DIRECTORY: "functions/schedule_manager"

      - name: Deploy function
        if: github.event.pull_request.draft == false
        uses: ./.github/actions/deploy_function
        with:
          REGISTRY_PROJECT: ${{ secrets.REGISTRY }}
          GCP_CREDENTIALS: ${{ secrets.TEST_GCLOUD_CREDENTIALS }}
          TARGET_PROJECT: ${{ needs.setup.outputs.target_project }}
          WORKING_DIRECTORY: "functions/schedule_manager"

  functions_scoreboard_updater:
    name: "functions / scoreboard_updater"
    runs-on: ubuntu-latest
    needs: ["setup"]
    if: ${{ needs.setup.outputs.functions_scoreboard_updater == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Setup environment
        run: |
          echo "CFL_API_KEY=${{ secrets.CFL_API_KEY }}" >> $GITHUB_ENV
          echo "IS_DEV=true" >> $GITHUB_ENV
          echo "GCLOUD_PROJECT=github_ci_run" >> $GITHUB_ENV

      - name: Build and test
        if: github.event.pull_request.draft == false
        uses: ./.github/actions/go_ci
        with:
          GO_VERSION: ${{ env.GO_VERSION }}
          WORKING_DIRECTORY: "functions/scoreboard_updater"

      - name: Deploy function
        uses: ./.github/actions/deploy_function
        with:
          REGISTRY_PROJECT: ${{ secrets.REGISTRY }}
          GCP_CREDENTIALS: ${{ secrets.TEST_GCLOUD_CREDENTIALS }}
          TARGET_PROJECT: ${{ needs.setup.outputs.target_project }}
          WORKING_DIRECTORY: "functions/scoreboard_updater"

  # Services
  services_api:
    name: "services / api"
    runs-on: ubuntu-latest
    needs: ["setup"]
    if: ${{ needs.setup.outputs.services_api == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Run checks
        uses: ./.github/actions/python_ci
        with:
          WORKING_DIRECTORY: "services/api"

  services_system:
    name: "services / system"
    runs-on: ubuntu-latest
    needs: ["setup"]
    if: ${{ needs.setup.outputs.services_system == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Run checks
        uses: ./.github/actions/python_ci
        with:
          WORKING_DIRECTORY: "services/system"
