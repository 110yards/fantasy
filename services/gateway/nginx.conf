http {
    log_format debug_log '{"status_code": $status, "method": "$request_method", "path": "$request_uri", "host": "$host", "user_agent": "$http_user_agent"}';

    include mime.types;

    # CORS ORIGINS
    map $http_origin $allow_origin {
        ~^https://*.110yards.ca$ $http_origin;
        ~^http://localhost:8080$ $http_origin;

        default "";
    }

    server {
        listen 80;
        access_log /dev/stdout debug_log;

        # Allowed Origins:
        add_header Access-Control-Allow-Origin $allow_origin always;
        add_header Access-Control-Allow-Methods 'GET, PUT, PATCH, DELETE' always;

        # If this is a preflight request, redirect it to the / location handler
        if ($request_method = 'OPTIONS') {
            rewrite .* /middleware_cors;
        }

        # auth_request /middleware_auth;
        auth_request_set $auth_status $upstream_status;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass_request_headers on;


        error_page 401 /401.json;
        location /401.json {
            return 401 '{"error": {"message": "Unauthorized", "code": 401 } }';
        }

        # location /events/ {
        #     auth_request off;
        #     proxy_pass http://events:3000/;
        # }

        # location /events/healthz {
        #     auth_request off;
        #     proxy_pass http://events:3000/healthz;
        # }

        # location /socket.io/ {
        #     auth_request off;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_pass http://events:3000/socket.io/;
        #     proxy_http_version 1.1;
        #     proxy_set_header Upgrade $http_upgrade;
        #     proxy_set_header Connection "upgrade";
        # }

        location /healthz {
            auth_request off;
            default_type application/json;
            return 200 '{ "serviceName": "gateway", "checks": { "nginx": { "status": "ok" } } }';
        }


        # location /middleware_auth {
        #     internal;

        #     proxy_pass http://auth:3000/validate;
        #     proxy_pass_request_body off;
        #     proxy_set_header Content-Length "";
        #     proxy_set_header X-Original-URI $request_uri;
        # }

        location /middleware_cors {
            internal;
            auth_request off;
            add_header Access-Control-Allow-Origin $allow_origin;
            add_header Access-Control-Allow-Headers 'Origin, X-Trust-Fund-Id, X-Plan-Id, X-Plan-Name, X-Integration-Id, X-Forwarded-For, X-Real-IP, Host, Access-Control-Allow-Methods, Authorization';

            # Allow browser to cache this response for 20 days
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }

    }
}


events {
}
