apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  ports:
    - name: "27017"
      port: 27017
      targetPort: 27017
    - name: "80"
      port: 80
      targetPort: 8081
  selector:
    name: mongo
status:
  loadBalancer: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: mongo
  name: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      name: mongo
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: mongo
    spec:
      containers:
        - image: mongo:5
          name: mongo
          env:
            - name: MONGO_INITDB_ROOT_PASSWORD
              value: password
            - name: MONGO_INITDB_ROOT_USERNAME
              value: root
          resources: {}
          volumeMounts:
            - mountPath: /data/db
              name: mongo-claim0

        - image: mongo-express
          name: mongo-express
          env:
            - name: ME_CONFIG_MONGODB_ADMINPASSWORD
              value: password
            - name: ME_CONFIG_MONGODB_ADMINUSERNAME
              value: root
            - name: ME_CONFIG_MONGODB_URL
              value: mongodb://root:password@mongo:27017/
          ports:
            - containerPort: 8081
          command: [ "/bin/sh", "-c", "sleep 10s && /sbin/tini -- /docker-entrypoint.sh"]
            
          resources: {}
      restartPolicy: Always
      volumes:
        - name: mongo-claim0
          persistentVolumeClaim:
            claimName: mongo-claim0
status: {}

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mongo
spec:
  ingressClassName: nginx
  rules:
  - host: mongo.k8s.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mongo
            port:
              number: 80
